module pixel_graphics_enhanced (
    input wire pixel_clk,
    input wire [9:0] x,
    input wire [9:0] y,
    input wire [1:0] game_state,
    input wire [2:0] element_type,
    input wire [9:0] element_x,
    input wire [9:0] element_y,
    input wire [1:0] frame,
    output reg [7:0] red,
    output reg [7:0] green,
    output reg [7:0] blue
);

    // Screen parameters
    parameter SCREEN_WIDTH = 640;
    parameter SCREEN_HEIGHT = 480;

    // Color definitions
    parameter [23:0] BLACK = 24'h000000;
    parameter [23:0] WHITE = 24'hFFFFFF;
    parameter [23:0] RED = 24'hFF0000;
    parameter [23:0] DARK_RED = 24'h800000;
    parameter [23:0] GREEN = 24'h00FF00;
    parameter [23:0] BLUE = 24'h0000FF;
    parameter [23:0] YELLOW = 24'hFFFF00;
    parameter [23:0] PURPLE = 24'h800080;
    parameter [23:0] CYAN = 24'h00FFFF;
    parameter [23:0] GOLD = 24'hFFD700;

    reg [23:0] pixel_color;

    // Rocket (player projectile) pattern - 4x12 pixels
    function [23:0] get_rocket_pixel;
        input [1:0] local_x;
        input [3:0] local_y;
        input frame;
        reg [3:0] pattern [0:11];
        begin
            // Animated flame pattern
            pattern[0] = frame[0] ? 4'b0110 : 4'b1001;
            pattern[1] = frame[0] ? 4'b1001 : 4'b0110;
            pattern[2] = 4'b1111;
            pattern[3] = 4'b1111;
            pattern[4] = 4'b0110;
            pattern[5] = 4'b0110;
            pattern[6] = 4'b0110;
            pattern[7] = 4'b0110;
            pattern[8] = 4'b0110;
            pattern[9] = 4'b0110;
            pattern[10] = 4'b0100;
            pattern[11] = 4'b0100;

            if (pattern[local_y][local_x])
                get_rocket_pixel = CYAN;
            else
                get_rocket_pixel = BLACK;
        end
    endfunction

    // Laser (alien projectile) pattern - 4x12 pixels
    function [23:0] get_laser_pixel;
        input [1:0] local_x;
        input [3:0] local_y;
        input frame;
        reg [3:0] pattern [0:11];
        begin
            // Lightning bolt pattern
            pattern[0] = 4'b0100;
            pattern[1] = 4'b0100;
            pattern[2] = 4'b0110;
            pattern[3] = 4'b0110;
            pattern[4] = 4'b1100;
            pattern[5] = 4'b1100;
            pattern[6] = 4'b0110;
            pattern[7] = 4'b0110;
            pattern[8] = 4'b0011;
            pattern[9] = 4'b0011;
            pattern[10] = frame[0] ? 4'b1100 : 4'b0011;
            pattern[11] = frame[0] ? 4'b0011 : 4'b1100;

            if (pattern[local_y][local_x])
                get_laser_pixel = YELLOW;
            else
                get_laser_pixel = BLACK;
        end
    endfunction

    // Heart (lives) pattern - 16x16 pixels
    function [23:0] get_heart_pixel;
        input [3:0] local_x;
        input [3:0] local_y;
        reg [15:0] pattern [0:15];
        begin
            pattern[0]  = 16'b0001100001100000;
            pattern[1]  = 16'b0011110011110000;
            pattern[2]  = 16'b0111111111111000;
            pattern[3]  = 16'b1111111111111100;
            pattern[4]  = 16'b1111111111111100;
            pattern[5]  = 16'b1111111111111100;
            pattern[6]  = 16'b0111111111111000;
            pattern[7]  = 16'b0011111111110000;
            pattern[8]  = 16'b0001111111100000;
            pattern[9]  = 16'b0000111111000000;
            pattern[10] = 16'b0000011110000000;
            pattern[11] = 16'b0000001100000000;
            pattern[12] = 16'b0000000000000000;
            pattern[13] = 16'b0000000000000000;
            pattern[14] = 16'b0000000000000000;
            pattern[15] = 16'b0000000000000000;

            if (pattern[local_y][local_x])
                get_heart_pixel = RED;
            else
                get_heart_pixel = BLACK;
        end
    endfunction

    // Text rendering functions
    function is_text_pixel;
        input [9:0] px, py;
        input [9:0] text_x, text_y;
        input [7:0] char_data [0:15];
        begin
            if (px >= text_x && px < text_x + 16 &&
                py >= text_y && py < text_y + 16)
                is_text_pixel = char_data[py - text_y][7-(px - text_x)];
            else
                is_text_pixel = 0;
        end
    endfunction

    // Background star pattern
    function is_star;
        input [9:0] px, py;
        input [1:0] pattern;
        begin
            case (pattern)
                2'b00: is_star = ((px + py) % 32 == 0) && ((px * py) % 71 == 0);
                2'b01: is_star = ((px + py) % 29 == 0) && ((px * py) % 67 == 0);
                2'b10: is_star = ((px - py) % 31 == 0) && ((px * py) % 73 == 0);
                2'b11: is_star = ((px ^ py) % 37 == 0) && ((px * py) % 79 == 0);
            endcase
        end
    endfunction

    // Trophy pattern for win screen
    function [23:0] get_trophy_pixel;
        input [5:0] local_x;
        input [5:0] local_y;
        reg [31:0] pattern [0:31];
        begin
            // Trophy cup pattern
            pattern[0]  = 32'b00000001111111111111111110000000;
            pattern[1]  = 32'b00000011111111111111111111000000;
            pattern[2]  = 32'b00000111111111111111111111100000;
            pattern[3]  = 32'b00001111111111111111111111110000;
            pattern[4]  = 32'b00001111111111111111111111110000;
            pattern[5]  = 32'b00001111111111111111111111110000;
            pattern[6]  = 32'b00001111111000000001111111110000;
            pattern[7]  = 32'b00001111110000000000111111110000;
            pattern[8]  = 32'b00001111100000000000011111110000;
            pattern[9]  = 32'b00001111100000000000011111110000;
            pattern[10] = 32'b00001111100000000000011111110000;
            pattern[11] = 32'b00000111110000000000111111100000;
            pattern[12] = 32'b00000011111000000001111111000000;
            pattern[13] = 32'b00000001111111111111111110000000;
            pattern[14] = 32'b00000000111111111111111100000000;
            pattern[15] = 32'b00000000011111111111111000000000;
            pattern[16] = 32'b00000000000111111111100000000000;
            pattern[17] = 32'b00000000000001111110000000000000;
            pattern[18] = 32'b00000000000000111100000000000000;
            pattern[19] = 32'b00000000000000111100000000000000;
            pattern[20] = 32'b00000000000001111110000000000000;
            pattern[21] = 32'b00000000000011111111000000000000;
            pattern[22] = 32'b00000000001111111111110000000000;
            pattern[23] = 32'b00000000011111111111111000000000;

            if (pattern[local_y][local_x])
                get_trophy_pixel = GOLD;
            else
                get_trophy_pixel = BLACK;
        end
    endfunction

    // Main rendering logic
    always @(posedge pixel_clk) begin
        case (game_state)
            2'b00: begin // START_SCREEN
                if (y == SCREEN_HEIGHT/2-50 || y == SCREEN_HEIGHT/2+50 ||
                    x == SCREEN_WIDTH/2-150 || x == SCREEN_WIDTH/2+150)
                    pixel_color = WHITE; // Screen border
                else if (y >= SCREEN_HEIGHT/2-48 && y < SCREEN_HEIGHT/2+48 &&
                         x >= SCREEN_WIDTH/2-148 && x < SCREEN_WIDTH/2+148) begin
                    if (is_text_pixel(x, y, SCREEN_WIDTH/2-100, SCREEN_HEIGHT/2-30, "SPACE INVADERS"))
                        pixel_color = GREEN;
                    else if (is_text_pixel(x, y, SCREEN_WIDTH/2-60, SCREEN_HEIGHT/2+10, "PRESS START"))
                        pixel_color = WHITE;
                    else if (is_star(x, y, frame))
                        pixel_color = WHITE;
                    else
                        pixel_color = BLACK;
                end else if (is_star(x, y, frame))
                    pixel_color = WHITE;
                else
                    pixel_color = BLACK;
            end

            2'b01: begin // MAIN_SCREEN
                case (element_type)
                    3'b000: begin // Sprites (aliens, ship)
                        if (x >= element_x && x < element_x + 4 &&
                            y >= element_y && y < element_y + 12)
                            pixel_color = get_rocket_pixel(x - element_x, y - element_y, frame);
                        else
                            pixel_color = BLACK;
                    end
                    
                    3'b001: begin // Projectiles
                        if (x >= element_x && x < element_x + 4 &&
                            y >= element_y && y < element_y + 12)
                            pixel_color = get_laser_pixel(x - element_x, y - element_y, frame);
                        else
                            pixel_color = BLACK;
                    end

                    3'b010: begin // Lives
                        if (x >= element_x && x < element_x + 16 &&
                            y >= element_y && y < element_y + 16)
                            pixel_color = get_heart_pixel(x - element_x, y - element_y);
                        else
                            pixel_color = BLACK;
                    end

                    default: begin
                        if (is_star(x, y, frame))
                            pixel_color = WHITE;
                        else
                            pixel_color = BLACK;
                    end
                endcase
            end

            2'b10: begin // WIN_SCREEN
                if (y >= SCREEN_HEIGHT/2-100 && y < SCREEN_HEIGHT/2+100) begin
                    if (x >= SCREEN_WIDTH/2-16 && x < SCREEN_WIDTH/2+16 &&
                        y >= SCREEN_HEIGHT/2-60 && y < SCREEN_HEIGHT/2-28)
                        pixel_color = get_trophy_pixel(x - (SCREEN_WIDTH/2-16), y - (SCREEN_HEIGHT/2-60));
                    else if (is_text_pixel(x, y, SCREEN_WIDTH/2-40, SCREEN_HEIGHT/2-20, "YOU WIN"))
                        pixel_color = GREEN;
                    else if (is_text_pixel(x, y, SCREEN_WIDTH/2-100, SCREEN_HEIGHT/2+20, "START: RETURN TO MENU"))
                        pixel_color = WHITE;
                    else if (is_star(x, y, frame))
                        pixel_color = WHITE;
                    else
                        pixel_color = BLACK;
                end else if (is_star(x, y, frame))
                    pixel_color = WHITE;
                else
                    pixel_color = BLACK;
            end

            2'b11: begin // LOSE_SCREEN
                if (y >= SCREEN_HEIGHT/2-60 && y < SCREEN_HEIGHT/2+60) begin
                    if (is_text_pixel(x, y, SCREEN_WIDTH/2-40, SCREEN_HEIGHT/2-40, "YOU LOSE"))
                        pixel_color = RED;
                    else if (is_text_pixel(x, y, SCREEN_WIDTH/2-100, SCREEN_HEIGHT/2, "FIRE: RESTART"))
                        pixel_color = WHITE;
                    else if (is_text_pixel(x, y, SCREEN_WIDTH/2-100, SCREEN_HEIGHT/2+20, "START: RETURN TO MENU"))
                        pixel_color = WHITE;
                    else if (is_star(x, y, frame))
                        pixel_color = WHITE;
                    else
                        pixel_color = BLACK;
                end else if (is_star(x, y, frame))
                    pixel_color = WHITE;
                else
                    pixel_color = BLACK;
            end
        endcase

        // Assign RGB components
        red = pixel_color[23:16];
        green = pixel_color[15:8];
        blue = pixel_color[7:0];
    end

endmodule