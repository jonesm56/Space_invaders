// Modified game_logic.v
module game_logic (
    input wire clk,
    input wire reset,
    input wire fire,
    input wire left,
    input wire right,
    input wire [9:0] x,
    input wire [9:0] y,
    input wire [1:0] game_state,
    output reg game_over,
    output reg game_win,
    output reg [7:0] score,
    output reg [7:0] high_score,
    output reg [2:0] element_type,
    output reg [9:0] element_x,
    output reg [9:0] element_y,
    output reg [1:0] frame,
	 output reg [1:0] alien_variant
);

    // Enhanced parameters for larger sprites
    parameter SCREEN_WIDTH = 640;
    parameter SCREEN_HEIGHT = 480;
    parameter NUM_ALIENS = 18;
    parameter ALIEN_COLS = 6;
    parameter ALIEN_ROWS = 3;
    parameter ALIEN_WIDTH = 32;
    parameter ALIEN_HEIGHT = 32;
    parameter SHIP_WIDTH = 32;
    parameter SHIP_HEIGHT = 32;
    parameter SHIP_SPEED = 4;
    parameter ALIEN_SPEED = 1;
    parameter ROCKET_WIDTH = 4;
    parameter ROCKET_HEIGHT = 12;
    parameter ROCKET_SPEED = 6;
    parameter LASER_WIDTH = 4;
    parameter LASER_HEIGHT = 12;
    parameter LASER_SPEED = 4;
    parameter SCORE_HEIGHT = 40;
    parameter EXPLOSION_FRAMES = 8;

    // Game state registers
    reg [9:0] ship_x;
    reg [9:0] ship_y;
    reg [9:0] alien_x [0:NUM_ALIENS-1];
    reg [9:0] alien_y [0:NUM_ALIENS-1];
    reg [NUM_ALIENS-1:0] alien_alive;
    reg [3:0] alien_explosion_frame [0:NUM_ALIENS-1];
    reg alien_direction;
    reg [9:0] rocket_x;
    reg [9:0] rocket_y;
    reg rocket_active;
    reg [9:0] laser_x;
    reg [9:0] laser_y;
    reg laser_active;
    reg [19:0] frame_counter;
    reg [3:0] ship_explosion_frame;
    reg [15:0] random_seed;
    
    integer i;
	 
	 // Random number generator
    always @(posedge clk) begin
        random_seed <= random_seed[14:0] + frame_counter[15:0] + ship_x[7:0];
    end


    // Game logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Initialize game state
            ship_x <= SCREEN_WIDTH/2;
            ship_y <= SCREEN_HEIGHT - SHIP_HEIGHT - 10;
            score <= 0;
            game_over <= 0;
            game_win <= 0;
            rocket_active <= 0;
            laser_active <= 0;
            frame_counter <= 0;
            frame <= 0;
            alien_direction <= 1;

            // Initialize aliens
            for (i = 0; i < NUM_ALIENS; i = i + 1) begin
                alien_x[i] <= 50 + (i % ALIEN_COLS) * (ALIEN_WIDTH + 20);
                alien_y[i] <= 50 + (i / ALIEN_COLS) * (ALIEN_HEIGHT + 20);
                alien_alive[i] <= 1;
            end
        end else begin
            // Frame and animation update
            frame_counter <= frame_counter + 1;
            if (frame_counter >= 20'd833333) begin // 60Hz at 50MHz clock
                frame_counter <= 0;
                frame <= frame + 1;
            end

            if (game_state == 2'b01) begin // MAIN_SCREEN
                // Ship movement
                if (left && ship_x > SHIP_SPEED)
                    ship_x <= ship_x - SHIP_SPEED;
                if (right && ship_x < SCREEN_WIDTH - SHIP_WIDTH - SHIP_SPEED)
                    ship_x <= ship_x + SHIP_SPEED;

                // Rocket logic
                if (fire && !rocket_active) begin
                    rocket_active <= 1;
                    rocket_x <= ship_x + SHIP_WIDTH/2;
                    rocket_y <= ship_y;
                end

                if (rocket_active) begin
                    rocket_y <= rocket_y - ROCKET_SPEED;
                    if (rocket_y <= 0)
                        rocket_active <= 0;

                    // Check rocket collision with aliens
                    for (i = 0; i < NUM_ALIENS; i = i + 1) begin
                        if (alien_alive[i] &&
                            rocket_x >= alien_x[i] &&
                            rocket_x <= alien_x[i] + ALIEN_WIDTH &&
                            rocket_y >= alien_y[i] &&
                            rocket_y <= alien_y[i] + ALIEN_HEIGHT) begin
                            alien_alive[i] <= 0;
                            rocket_active <= 0;
                            score <= score + 10;
                        end
                    end
                end

                // Alien movement
                if (frame_counter == 0) begin
                    for (i = 0; i < NUM_ALIENS; i = i + 1) begin
                        if (alien_alive[i]) begin
                            if (alien_direction)
                                alien_x[i] <= alien_x[i] + ALIEN_SPEED;
                            else
                                alien_x[i] <= alien_x[i] - ALIEN_SPEED;

                            // Check for direction change
                            if ((alien_direction && alien_x[i] >= SCREEN_WIDTH - ALIEN_WIDTH) ||
                                (!alien_direction && alien_x[i] <= 0)) begin
                                alien_direction <= !alien_direction;
                                alien_y[i] <= alien_y[i] + ALIEN_HEIGHT;
                            end

                            // Check for game over
                            if (alien_y[i] + ALIEN_HEIGHT >= ship_y)
                                game_over <= 1;
                        end
                    end
                end

                // Check for win condition
                game_win <= (alien_alive == 0);
            end

            // Update high score
            if (score > high_score)
                high_score <= score;
        end
    end

    // Pixel rendering logic
    always @* begin
        // Default values
        element_type = 3'b100; // Background
        element_x = 0;
        element_y = 0;

        // Ship
        if (x >= ship_x && x < ship_x + SHIP_WIDTH &&
            y >= ship_y && y < ship_y + SHIP_HEIGHT) begin
            element_type = 3'b000;
            element_x = ship_x;
            element_y = ship_y;
        end

        // Aliens
        for (i = 0; i < NUM_ALIENS; i = i + 1) begin
            if (alien_alive[i] &&
                x >= alien_x[i] && x < alien_x[i] + ALIEN_WIDTH &&
                y >= alien_y[i] && y < alien_y[i] + ALIEN_HEIGHT) begin
                element_type = 3'b000;
                element_x = alien_x[i];
                element_y = alien_y[i];
            end
        end

        // Rocket
        if (rocket_active &&
            x >= rocket_x && x < rocket_x + 2 &&
            y >= rocket_y && y < rocket_y + 8) begin
            element_type = 3'b001;
            element_x = rocket_x;
            element_y = rocket_y;
        end

        // Score bar
        if (y < 20) begin
            element_type = 3'b010;
            element_x = x;
            element_y = y;
        end
    end

endmodule

// Modified space_invaders.v
module space_invaders (
    input CLOCK_50,
    input [3:0] KEY,
    input [9:0] SW,
    output VGA_CLK,
    output VGA_HS,
    output VGA_VS,
    output VGA_BLANK_N,
    output VGA_SYNC_N,
    output [7:0] VGA_R,
    output [7:0] VGA_G,
    output [7:0] VGA_B,
    output [9:0] LEDR,
    output [6:0] HEX0,
    output [6:0] HEX1,
    output [6:0] HEX2,
    output [6:0] HEX3,
    output [6:0] HEX4,
    output [6:0] HEX5
);

    // Signal declarations
    wire reset = ~KEY[0];
    wire start_button = ~KEY[1];
    wire fire_button = ~KEY[2];
    wire right_button = ~KEY[3];
    wire left_button = SW[0];

    wire pixel_clk;
    wire game_clk;
    wire [1:0] game_state;
    wire [9:0] pixel_x;
    wire [9:0] pixel_y;
    wire video_on;
    wire [7:0] score;
    wire [7:0] high_score;
    wire [2:0] element_type;
    wire [9:0] element_x;
    wire [9:0] element_y;
    wire [1:0] frame;
    wire game_over;
    wire game_win;

    // Clock generation
    pll_main pll (
        .refclk(CLOCK_50),
        .rst(reset),
        .outclk_0(pixel_clk),  // 25MHz
        .outclk_1(game_clk)    // 50MHz
    );

    // VGA controller
    vga_controller vga_ctrl (
        .pixel_clk(pixel_clk),
        .reset(reset),
        .hsync(VGA_HS),
        .vsync(VGA_VS),
        .display_on(video_on),
        .x(pixel_x),
        .y(pixel_y)
    );

    // Game state controller
    game_fsm game_ctrl (
        .clk(game_clk),
        .reset(reset),
        .start_button(start_button),
        .fire_button(fire_button),
        .game_win(game_win),
        .game_over(game_over),
        .game_state(game_state)
    );

    // Game logic
    game_logic game_logic_inst (
        .clk(game_clk),
        .reset(reset),
        .fire(fire_button),
        .left(left_button),
        .right(right_button),
        .x(pixel_x),
        .y(pixel_y),
        .game_state(game_state),
        .game_over(game_over),
        .game_win(game_win),
        .score(score),
        .high_score(high_score),
        .element_type(element_type),
        .element_x(element_x),
        .element_y(element_y),
        .frame(frame)
    );

    // Pixel graphics generator
    pixel_graphics pixel_gen (
        .pixel_clk(pixel_clk),
        .x(pixel_x),
        .y(pixel_y),
        .game_state(game_state),
        .element_type(element_type),
        .element_x(element_x),
        .element_y(element_y),
        .frame(frame),
        .red(VGA_R),
        .green(VGA_G),
        .blue(VGA_B)
    );

    // Seven segment display for score
    seg7_display score_low (
        .bin(score[3:0]),
        .seg(HEX0)
    );

    seg7_display score_high (
        .bin(score[7:4]),
        .seg(HEX1)
    );

    seg7_display high_score_low (
        .bin(high_score[3:0]),
        .seg(HEX2)
    );

    seg7_display high_score_high (
        .bin(high_score[7:4]),
        .seg(HEX3)
    );

    // Status display
    assign HEX4 = (game_state == 2'b00) ? 7'b1000000 : // 0
                  (game_state == 2'b01) ? 7'b1111001 : // 1
                  (game_state == 2'b10) ? 7'b0100100 : // 2
                                        7'b0110000;  // 3
    assign HEX5 = 7'b1111111; // Off

    // Debug LEDs
    assign LEDR = {game_state, game_over, game_win, video_on, 5'b0};

    // VGA control signals
    assign VGA_CLK = pixel_clk;
    assign VGA_BLANK_N = video_on;
    assign VGA_SYNC_N = 0;

endmodule